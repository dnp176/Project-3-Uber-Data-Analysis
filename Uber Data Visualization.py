# -*- coding: utf-8 -*-
"""Uber_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LUUhGZnApyvblQDghbDom5s34zDxeiSA

# @**CodeClause Project : Uber Data Analysis (Visualization)**

## **Summary To Explain Project (Keypoints)**



*   Import Modules
*   Load Dataset
*   Data Preparation
*   Visualization
      1.   Number of trips by hour
      2.   Number of trips by month
      3.   Analysis of Week Day and Running Day
      4.   Ratio of the increase from August to September
      5.   Number of trips by weekday
      6.   Lowest number of trips by weekday
      7.   Trips Ratio Working Days and Weekends
      8.   Number of trips by day
      9.   Number of trips by hour and month
      10.   Trips by Hour and Weekday

### 1. Import Modules
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# %matplotlib inline

"""### 2. Load Dataset"""

#Load the datasets
try:
    df_apr14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-apr14.csv",error_bad_lines=False,engine="python")
    df_may14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-may14.csv",error_bad_lines=False,engine="python")
    df_jun14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-jun14.csv",error_bad_lines=False,engine="python")
    df_jul14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-jul14.csv",error_bad_lines=False,engine="python")
    df_aug14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-aug14.csv",error_bad_lines=False,engine="python")
    df_sep14=pd.read_csv("/content/drive/MyDrive/MyDataSet/Uber_Visialization/uber-raw-data-sep14.csv",error_bad_lines=False,engine="python")
except pd.errors.ParserError as e:
    print("Error occurred while parsing CSV:", e)

#Merge the dataframes into one

df = df_apr14.append([df_may14,df_jun14,df_jul14,df_aug14,df_sep14], ignore_index=True)

"""### 3. Data Preparation"""

df.head()

df.shape

df.info()

df.describe()

#Renaming the Date/Time Colomn
df = df.rename(columns={'Date/Time': 'Date_time'})

#Converting the Date_time type into Datetime
df['Date_time'] = pd.to_datetime(df['Date_time'])

#Adding usufull colomns
df['Month'] = df['Date_time'].dt.month_name()
df['Weekday'] = df['Date_time'].dt.day_name()
df['Day'] = df['Date_time'].dt.day
df['Hour'] = df['Date_time'].dt.hour
df['Minute'] = df['Date_time'].dt.minute
df['weekno']=df['Date_time'].dt.weekofyear - 13

df.head()

df.isnull().sum()

df.info()

df.describe(include = 'all')

"""## 4 --------- Visualization ----------

### 4.1 Number of trips by hour
"""

df_hour_grouped = df.groupby(['Hour']).count()
df_hour = pd.DataFrame({'Number_of_trips':df_hour_grouped.values[:,0]}, index = df_hour_grouped.index) 
df_hour.head()

df_hour.plot(kind='bar', figsize=(8,6))
plt.ylabel('Number of Trips')
plt.title('The number of trips by hour')
plt.show()

"""### 4.2 Number of trips by month"""

df_month_grouped = df.groupby(['Month'], sort=False).count()
df_month = pd.DataFrame({'Number_of_trips':df_month_grouped.values[:,0]}, index = df_month_grouped.index) 
df_month

df_month.plot(kind='bar', figsize=(8,6))
plt.ylabel('Number of Trips')
plt.title('The number of trips by month')
plt.show()

"""### 4.3 Analysis of Week Day and Running Day"""

week_day=pd.DataFrame(df['Weekday'].value_counts())

week_day['day_type']=['wd','wd','wd','wd','we','wd','we']

pie=week_day.groupby('day_type').sum()
pie.iloc[0,0]=pie.iloc[0,0]/5
pie.iloc[1,0]=pie.iloc[1,0]/2
pie

explode=[0,0.05]
colors=['cyan','gold']
labels=['Weekday','Weekend']
pie.plot.pie(autopct = '%1.1f%%',shadow=True,subplots=True,
        colors=colors,explode=explode)
plt.legend(labels=labels)
plt.show()

"""### 4.4 Ratio of the increase from August to September"""

number_of_trips_may = df_month.loc['May'].values
number_of_trips_sep = df_month.loc['September'].values

ratio_month = (((number_of_trips_may - number_of_trips_sep) / number_of_trips_may) * 100)[0]
ratio_month = round(ratio_month)

print('The ratio of the increase from August to September is {} %.'.format(ratio_month))

"""### 4.5 Number of trips by weekday"""

df_weekday_grouped = df.groupby(['Weekday'], sort = False).count()
df_weekday = pd.DataFrame({'Number_of_trips':df_weekday_grouped.values[:,0]}, index = df_weekday_grouped.index) 
df_weekday

df_weekday.plot(kind='bar', figsize=(8,6))
plt.ylabel('Number of Trips')
plt.title('The number of trips by weekday')
plt.show()

"""### 4.6 Lowest number of trips by weekday"""

min_number_of_trips_weekday = min(df_weekday['Number_of_trips'])
min_weekday = df_weekday[df_weekday['Number_of_trips'] == min_number_of_trips_weekday].index[0]
print('The lowest number of trips by weekday is {} trip, that corresponds to {}.'.format(min_number_of_trips_weekday, min_weekday))

"""### 4.7 Trips Ratio Working Days and Weekends"""

mean_number_of_trips_weekend = ((df_weekday.loc['Saturday'] + df_weekday.loc['Sunday']) / 2).values
mean_number_of_trips_workday = (((df_weekday.loc['Monday'] + df_weekday.loc['Tuesday'] + df_weekday.loc['Wednesday'] + df_weekday.loc['Thursday'] + df_weekday.loc['Friday'])/ 5).values)[0]
ratio_weekday = (((mean_number_of_trips_workday - mean_number_of_trips_weekend) / mean_number_of_trips_weekend) * 100)[0]
ratio_weekday = round(ratio_weekday, 1)
print('The mean number of trips during working days is {}% higher than the mean number of trips during weekends.'.format(ratio_weekday))

"""### 4.8 Number of trips by day"""

df_day_grouped = df.groupby(['Day']).count()
df_day = pd.DataFrame({'Number_of_trips':df_day_grouped.values[:,0]}, index = df_day_grouped.index) 
df_day.head()

df_day.plot(kind='bar', figsize=(10,8))
plt.ylabel('Number of Trips')
plt.title('The number of trips by day')
plt.show()

"""### 4.9 Number of trips by hour and month"""

df_hour_month_grouped = df.groupby(['Hour','Month']).count()
df_hour_month = pd.DataFrame({'Number_of_trips':df_hour_month_grouped.values[:,1]}, index = df_hour_month_grouped.index) 
df_hour_month.head(10)

df_hour_month.reset_index(inplace= True)
df_hour_month.head()

data_hour_month = df_hour_month['Number_of_trips'].values.reshape(24,6)
data_hour_month

df_hour_month = pd.DataFrame(data = data_hour_month, index = df_hour_month['Hour'].unique(), columns = df['Month'].unique())
df_hour_month.head()

df_hour_month.plot(kind='bar', figsize=(8,6), stacked=True)
plt.xlabel('Hour')
plt.ylabel('Number of Trips')
plt.title('The number of trips by hour and month')
plt.show()

df_hour_month.plot(kind='bar', figsize=(25,6),width=0.8)
plt.xlabel('Hour')
plt.ylabel('Number of Trips')
plt.title('The number of Trips by Hour and Month')
plt.show()

"""### 4.10 Trips by Hour and Weekday"""

df_weekday_hour_grouped = df.groupby(['Weekday','Hour'], sort = False).count()
df_weekday_hour = pd.DataFrame({'Number_of_trips':df_weekday_hour_grouped.values[:,1]}, index = df_weekday_hour_grouped.index) 
df_weekday_hour

df_weekday_hour.reset_index(inplace= True)
data_weekday_hour = df_weekday_hour['Number_of_trips'].values.reshape(7,24)
df_weekday_hour = pd.DataFrame(data = data_weekday_hour, index = df_weekday_hour['Weekday'].unique(), columns = df['Hour'].unique())
df_weekday_hour.head()

df_weekday_hour.plot(kind='bar', figsize=(20,6), width = 0.7)
plt.xlabel('Weekday')
plt.ylabel('Number of Trips')
plt.title('Trips by Hour and Weekday')
plt.show()

df_month_weekday_grouped = df.groupby(['Month','Weekday'], sort=False).count()
df_month_weekday = pd.DataFrame({'Number_of_trips':df_month_weekday_grouped.values[:,1]}, index = df_month_weekday_grouped.index) 
df_month_weekday.head(10)

df_month_weekday.reset_index(inplace= True)
data_month_weekday = df_month_weekday['Number_of_trips'].values.reshape(6,7)
df_month_weekday = pd.DataFrame(data = data_month_weekday, index = df_month_weekday['Month'].unique(), columns = df['Weekday'].unique())
df_month_weekday.head()

df_month_weekday.plot(kind='bar', figsize=(8,6), stacked = True)
plt.xlabel('Month')
plt.ylabel('Number of Trips')
plt.title('Trips by Month and Weekday')
plt.show()

df_month_weekday.plot(kind='bar', figsize=(18,6), width = 0.6)
plt.xlabel('Month')
plt.ylabel('Number of Trips')
plt.title('Trips by Month and Weekday')
plt.show()